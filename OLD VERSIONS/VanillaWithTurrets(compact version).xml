<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//type definitions:

typedef struct {
    int[-1,15] x;
    int[-1,15] y;
} Cell;

typedef struct {
    int health;
} MainTowerConfiguration;

typedef struct {
    int speed;
    int health;
    int damage;
    int spawningTime;
    bool kind;
} EnemyConfiguration;

typedef struct {
    int range;
    int speed;
    int damage;
} TurretConfiguration;

typedef struct {
    Cell pos;
    int lifeTime;
    bool kind;
    bool available;
} EnemyRecord;

typedef struct {
    int id;
    int damage;
} TargetRecord;

//configuration definitions:

const MainTowerConfiguration MT := {10};

const EnemyConfiguration SQUARE := {3, 20, 4, 3, true};
const EnemyConfiguration CIRCLE := {1, 10, 2, 2, false};

const TurretConfiguration BASIC := {2,2,2};
const TurretConfiguration CANNON := {1,7,5};
const TurretConfiguration SNIPER := {4,20,8};

//map definitions

const Cell MAIN_POS = {15,4};

const Cell TURRET0_POS = {5,5};
const Cell TURRET1_POS = {8,2};
const Cell TURRET2_POS = {8,6};
const Cell TURRET3_POS = {14,2};
const Cell TURRET4_POS = {14,6};
const Cell TURRET5_POS = {2,3};
const Cell TURRET6_POS = {11,5};

const Cell INVALID_POS = {-1,-1};
const Cell START_POS = {0,0};

const int MAX_PATH_LENGTH = 25;

//wave parameters

const int MAX_ENEMIES := 3; //how many enemies will eventually get into the match
int not_dead_enemies := MAX_ENEMIES; //how many enemies are currently alive or about to spawn
int available_enemies := 0; //how many enemies are currently available (already spawned and not dead)

bool mt_alive = true;

//channels and shared parameters

    //enemies --&gt; MT

    urgent chan SHOOT_TO_MT;
    int damage_to_mt; //where enemies put the damage for the MT

    //turrets --&gt; enemies
    
    broadcast chan SHOOT_TO_ENEMY;
    EnemyRecord shoot_table[MAX_ENEMIES]; //where turrets can look for enemies positions and
                                          //all the information they need to choose which one
                                          //target
    
    TargetRecord target_record; //where turrets put the ID of the targetted enemy and the related
                                //damage 

bool isValid (Cell c)
    {
        if (c == INVALID_POS)
            {
                return (true);
            }
        if (c.y == 7)
            {
                return (c.x&gt;=7 &amp;&amp; c.x&lt;=15);
            } 
        if (c.y == 6 || c.y == 5)
            {
                return (c.x == 7 || c.x == 10 || c.x == 15);
            }
        if (c.y == 4)
            {
                return (c.x != 8 &amp;&amp; c.x != 9);
            }
        if (c.y == 3 || c.y == 2)
            {
                return (c.x == 0 || c.x == 7 || c.x == 15);
            }
        if (c.y == 1)
            {
                return (c.x == 0 || (c.x &gt;=7 &amp;&amp; c.x&lt;=15));
            }
        if (c.y == 0)
            {
                return (c.x == 0);
            }

        return (false);
    }

bool matchEnded()
    {
        return (not_dead_enemies == 0 || !mt_alive);
    }</declaration>
	<template>
		<name>compactEnemy</name>
		<parameter>const int id, const int speed, int health, const int damage, const int spawningTime, const bool kind</parameter>
		<declaration>int speed_counter := 0;
int spawning_timer := spawningTime;
Cell pos := INVALID_POS;
int lifeTime := 0;
int chosenPath := 0;

void initialize(int i)
    {
        pos = START_POS;
        chosenPath = i;

        shoot_table[id].lifeTime = 0;
        shoot_table[id].kind = kind;
        shoot_table[id].available = true;
        shoot_table[id].pos = pos;
        shoot_table[id].lifeTime = lifeTime;

        available_enemies++;
    }
void shoot()
    {
        damage_to_mt = damage;
    }
void dismiss ()
    {
        shoot_table[id].available = false;
        not_dead_enemies--;
        available_enemies--;
    }
void takeDamage ()
    {
        if (target_record.id == id)
            {
                health = health - target_record.damage;
                target_record.damage = 0;
                if (health &lt;= 0)
                    dismiss();
            }
    }

void updateRecord ()
    {
        shoot_table[id].pos = pos;
        lifeTime++;
        shoot_table[id].lifeTime = lifeTime;        
    }
void next()
    {
        if (pos.x == 0)
            {
                if (pos.y &lt;=3)
                    pos.y = pos.y+1;
                else
                    if (pos.y == 4)
                        pos.x = 1;
                
                return;
            }
        if (pos.x &gt;=1 &amp;&amp; pos.x &lt;= 6)
            {
                pos.x = pos.x +1;
                return;
            }
        if (pos.x == 7)
            {
                if (pos.y == 4)
                    {
                        if (chosenPath == 0 || chosenPath == 1)
                            pos.y = pos.y + 1;
                        else
                            pos.y = pos.y - 1;
                    }
                else
                    if (pos.y == 5 || pos.y == 6)
                        pos.y = pos.y + 1;
                    else
                        if (pos.y == 3 || pos.y == 2)
                            pos.y = pos.y - 1;
                        else
                            if (pos.y == 7 || pos.y == 1)
                                pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 8 &amp;&amp; pos.x &lt;= 9)
            {
                if (pos.y == 7 || pos.y == 1)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 10)
            {
                if (pos.y == 7)
                    {
                        if (chosenPath == 0)
                            pos.y = pos.y - 1;
                        else
                            pos.x = pos.x + 1;
                    }
                else
                    if (pos.y == 6 || pos.y == 5)
                        pos.y = pos.y - 1;
                    else
                        if (pos.y == 1 || pos.y == 4)
                            pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 11 &amp;&amp; pos.x &lt;= 14)
            {
                if (pos.y == 7 || pos.y == 1 || pos.y == 4)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 15)
            {
                if (pos.y &lt; 4 &amp;&amp; pos.y &gt;= 1)
                    pos.y = pos.y + 1;
                else
                    if (pos.y &gt; 4 &amp;&amp; pos.y &lt;= 7)
                        pos.y = pos.y - 1;
                return;
            }
    }
bool movable ()
    {
        return (pos != MAIN_POS &amp;&amp; health&gt;0 &amp;&amp; !matchEnded());
    }</declaration>
		<location id="id0" x="501" y="433" color="#ffa500">
		</location>
		<location id="id1" x="-93" y="433" color="#00ff00">
		</location>
		<location id="id2" x="501" y="246" color="#000000">
			<name x="476" y="212">ended</name>
		</location>
		<init ref="id1"/>
		<transition id="id3">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="493">spawning_timer==1 &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="161" y="518">initialize(2)</label>
			<nail x="0" y="510"/>
			<nail x="246" y="510"/>
			<nail x="399" y="510"/>
		</transition>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="323">spawning_timer==1 &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="161" y="348">initialize(0)</label>
			<nail x="0" y="348"/>
			<nail x="399" y="348"/>
		</transition>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-433" y="399">spawning_timer&gt;1 &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="-289" y="416">spawning_timer--</label>
			<nail x="-144" y="450"/>
			<nail x="-144" y="399"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="561" y="425">health&gt;0</label>
			<label kind="synchronisation" x="561" y="442">SHOOT_TO_ENEMY?</label>
			<label kind="assignment" x="552" y="459">takeDamage()</label>
			<nail x="552" y="425"/>
			<nail x="544" y="467"/>
		</transition>
		<transition id="id7" color="#00ff00">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="76" y="408">spawning_timer==1 &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="170" y="433">initialize(1)</label>
		</transition>
		<transition id="id8" color="#ffa500">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="510" y="272">pos == MAIN_POS &amp;&amp; health&gt;0</label>
			<label kind="synchronisation" x="510" y="289">SHOOT_TO_MT!</label>
			<label kind="assignment" x="510" y="306">shoot(),dismiss()</label>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="510" y="484">speed_counter&lt;speed &amp;&amp; movable()</label>
			<label kind="assignment" x="493" y="501">speed_counter++,updateRecord()</label>
			<nail x="493" y="484"/>
			<nail x="527" y="476"/>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="544" y="374">speed_counter==speed &amp;&amp; movable()</label>
			<label kind="assignment" x="561" y="399">next(),speed_counter=0,updateRecord()</label>
			<nail x="527" y="391"/>
			<nail x="552" y="416"/>
		</transition>
	</template>
	<template>
		<name>turret</name>
		<parameter>int id, Cell pos, int range, int speed, int damage</parameter>
		<declaration>int speed_timer=0;

int max (int v1, int v2)
    {
        if (v1 &gt;= v2)
            return (v1);
        else
            return (v2);
    }
int dist(const Cell c1, const Cell c2)
    {
        return (max(abs(c1.x - c2.x), abs(c1.y - c2.y)));
    }
void shoot (int id)
    {
        target_record.id = id;
        target_record.damage = damage;
        speed_timer = speed;
    }
void target()
    {
        int i, app_i, cont=0, target_id, target_dist, target_lifeTime, d;

        if (available_enemies &gt; 0)
            {
                i = 0;
                while (i &lt; MAX_ENEMIES &amp;&amp; !(shoot_table[i].available &amp;&amp; dist(shoot_table[i].pos, pos)&lt;=range))
                    {
                        i++;
                    }
                if (i &lt; MAX_ENEMIES)
                    {
                        target_id = i;
                        target_dist = dist(shoot_table[i].pos, pos);
                        target_lifeTime = shoot_table[i].lifeTime;
                        cont++;
                        for (i = app_i+1 ; cont &lt; available_enemies; i++)
                            {
                                if (shoot_table[i].available)
                                    {
                                        cont++;
                                        d = dist(shoot_table[i].pos, pos);
                                        if (d &lt;target_dist)
                                            {
                                                target_id = i;
                                                target_dist = d;
                                                target_lifeTime = shoot_table[i].lifeTime;
                                            }
                                        else
                                            {        
                                                if (d == target_dist)
                                                    {
                                                        if (target_lifeTime &lt; shoot_table[i].lifeTime)
                                                            {
                                                                target_id = i;
                                                                target_lifeTime = shoot_table[i].lifeTime;
                                                            }
                                                        else
                                                            {
                                                                if (target_lifeTime == shoot_table[i].lifeTime)
                                                                    {
                                                                        if (shoot_table[i].kind)
                                                                            {
                                                                                 target_id = i;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                       }
                            }

                        shoot (target_id);
                    }
                else
                    {
                        return;
                    }
            }
    }
bool shootable()
    {
        int i, cont;
        
        cont=0;
        for (i = 0 ; i&lt;MAX_ENEMIES &amp;&amp; cont&lt;available_enemies; i++)
            {
                if (shoot_table[i].available)
                    {
                        cont++;
                        if (dist(shoot_table[i].pos, pos)&lt;=range)
                           {
                               return (true);
                           }
                    }
            }

        return (false);
    }
</declaration>
		<location id="id11" x="-459" y="-306">
		</location>
		<init ref="id11"/>
		<transition id="id12">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-382" y="-340">speed_timer&gt;0 &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="-382" y="-323">speed_timer--</label>
			<nail x="-391" y="-348"/>
			<nail x="-391" y="-272"/>
		</transition>
		<transition id="id13">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-790" y="-340">speed_timer==0 &amp;&amp; shootable()</label>
			<label kind="synchronisation" x="-671" y="-323">SHOOT_TO_ENEMY!</label>
			<label kind="assignment" x="-612" y="-306">target()</label>
			<nail x="-535" y="-348"/>
			<nail x="-535" y="-280"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">mainTower</name>
		<parameter>int life</parameter>
		<declaration>void takeDamage()
    {
        life = life - damage_to_mt;
        damage_to_mt = 0;
        if (life &lt;= 0)
            mt_alive = false;
    }</declaration>
		<location id="id14" x="-1113" y="-578" color="#00ff00">
		</location>
		<init ref="id14"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-1265" y="-611">life&gt;0</label>
			<label kind="synchronisation" x="-1283" y="-595">SHOOT_TO_MT?</label>
			<label kind="assignment" x="-1282" y="-577">takeDamage()</label>
			<nail x="-1164" y="-527"/>
			<nail x="-1173" y="-544"/>
			<nail x="-1173" y="-612"/>
		</transition>
	</template>
	<system>circlec(const int id) = compactEnemy(id, CIRCLE.speed, CIRCLE.health, CIRCLE.damage, CIRCLE.spawningTime, CIRCLE.kind);
squarec(const int id) = compactEnemy(id, SQUARE.speed, SQUARE.health, SQUARE.damage, SQUARE.spawningTime, SQUARE.kind);
basic(const int id, const Cell pos) = turret(id, pos, BASIC.range, BASIC.speed, BASIC.damage);
cannon(const int id, const Cell pos) = turret(id, pos, CANNON.range, CANNON.speed, CANNON.damage);
sniper(const int id, const Cell pos) = turret(id, pos, SNIPER.range, SNIPER.speed, SNIPER.damage);

enc0 = circlec(0);
enc1 = squarec(1);
enc2 = circlec(2);
enc3 = squarec(3);
enc4 = circlec(4);
enc5 = squarec(5);
enc6 = circlec(6);
enc7 = squarec(7);
mt = mainTower(MT.health);
t0 = basic(0, TURRET0_POS);
t1 = cannon(1, TURRET1_POS);
t2 = cannon(2, TURRET2_POS);
t3 = cannon(3, TURRET3_POS);
t4 = cannon(4, TURRET4_POS);
t5 = sniper(5, TURRET5_POS);
t6 = sniper(6, TURRET6_POS);

system mt,enc0,enc1,enc2;




</system>
	<queries>
		<query>
			<formula>A[](deadlock imply matchEnded())</formula>
			<comment/>
			<option key="--exploration" value="0"/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:51:55 +0200">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt;(enc0.pos == MAIN_POS)</formula>
			<comment/>
			<option key="--exploration" value="0"/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:36:12 +0200">
				<option key="--exploration" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[](enc0.pos == MAIN_POS imply enc0.lifeTime&lt;=(MAX_PATH_LENGTH*(CIRCLE.speed+1)))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:36:15 +0200">
			</result>
		</query>
		<query>
			<formula>A[](enc1.pos == MAIN_POS imply enc1.lifeTime&lt;=(MAX_PATH_LENGTH*(SQUARE.speed+1)))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:56:09 +0200">
			</result>
		</query>
		<query>
			<formula>A[](isValid(enc0.pos))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:36:27 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt;(mt.life &lt;= 0)</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2025-05-21 07:36:32 +0200">
			</result>
		</query>
	</queries>
</nta>
