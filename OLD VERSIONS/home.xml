<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>int DAMAGE_MT;

urgent chan STMT;

urgent chan LOCK_STMT;
urgent chan UNLOCK_STMT;


/*
enum TURRET_TYPE {
    BASIC,
    CANNON,
    SNIPER
}
*/
/*
typedef struct _cell {
    int x;
    int y;
} Cell;
/*
typedef struct _turret_config {
    const int range;
    const int firing_speed;
    const int inflicted_damage;
} TurretConfig;

typedef struct _lfe_message_format {
    const int turretID;
    const Cell cell
} EnemiesLookupMessage;

typedef struct _ts_message_format {
    const int enemyID;
    const int power;
} TurretShotMessage;

typedef struct _enemyRec {
    Cell pos;
    EnemyKind kind;
    int age;
} EnemyRecord;
*/
/*
const int MAP_ROWS = 8;
const int MAP_COLS = 16;

const int[0,3] map[MAP_ROWS,MAP_COLS] :=
    {{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
     {2,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2},
     {2,0,0,0,0,0,0,2,1,0,0,0,0,0,1,2},
     {2,0,1,0,0,0,0,2,0,0,0,0,0,0,0,2},
     {2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,3},
     {0,0,0,0,0,1,0,2,0,0,2,1,0,0,0,2},
     {0,0,0,0,0,0,0,2,1,0,2,0,0,0,1,2},
     {0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2}};

const int CELL_TYPE_BLANK = 0;
const int CELL_TYPE_TURRETS = 1;
const int CELL_TYPE_ENEMIES = 2;
const int CELL_TYPE_MAIN_TOWER = 3;

const int MAIN_TOWER_POS_X = 15;
const int MAIN_TOWER_POS_Y = 4;

const int TURRET_1_POS_X = 8;
const int TURRET_1_POS_Y = 6;

const int TURRET_2_POS_X = 14;
const int TURRET_2_POS_Y = 6;

const int TURRET_3_POS_X = 5;
const int TURRET_3_POS_Y = 5;

const int TURRET_4_POS_X = 11;
const int TURRET_4_POS_Y = 5;

const int TURRET_5_POS_X = 2;
const int TURRET_5_POS_Y = 3;

const int TURRET_6_POS_X = 8;
const int TURRET_6_POS_Y = 2;

const int TURRET_7_POS_X = 14;
const int TURRET_7_POS_Y = 2;

const int CIRCLES_ENEMIES = 3;
const int SQUARES_ENEMIES = 3;

enum EnemyKind {
    SQUARE,
    CIRCLE
}
*/
</declaration>
	<template>
		<name>STMTCONTROLLER</name>
		<location id="id0" x="-221" y="-68">
		</location>
		<location id="id1" x="17" y="-59">
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-144" y="8">UNLOCK_STMT?</label>
			<nail x="-102" y="8"/>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-136" y="-93">LOCK_STMT?</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">MT</name>
		<declaration>const int MAX_LIFE = 10;

int life = MAX_LIFE;

process MTA()
    {
       
    }  
void decLife()
    {
        life = life - DAMAGE_MT;
    }</declaration>
		<location id="id4" x="-1113" y="-578">
			<name x="-1123" y="-612">alive</name>
		</location>
		<location id="id5" x="-867" y="-578">
			<name x="-877" y="-612">dead</name>
		</location>
		<init ref="id4"/>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-1334" y="-552">life&gt;0</label>
			<label kind="synchronisation" x="-1326" y="-535">STMT?</label>
			<label kind="assignment" x="-1351" y="-518">decDamage()</label>
			<nail x="-1233" y="-468"/>
			<nail x="-1242" y="-485"/>
			<nail x="-1276" y="-672"/>
		</transition>
		<transition id="id7">
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select" x="-799" y="-552">STMT?</label>
			<nail x="-799" y="-569"/>
			<nail x="-824" y="-527"/>
			<nail x="-850" y="-535"/>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-1037" y="-612">life == 0</label>
		</transition>
	</template>
	<template>
		<name>turret</name>
		<declaration>const TurretConfig config;
const int id;
const Cell pos;
const int max_enemies;

enemyRecord nearEnemies[max_enemies];
int nearEnemiesLen;

process turret(TurretConfig chosen_config, int myID, Cell c, int me)
    {
        config = chosen_config; 
        id = myID;
        pos = c;
        max_enemies = me;
        nearEnemiesLen = 0;
    }
void lookForEnemies(int k)
    {
        int i,j;

        EnemiesLookupMessage msg;
        msg.turretID = id;
        
        j = -k;
        for (i = -r ; i &lt;= 2*r ; i++)
            {
                msg.cell.x = pos.x + i;
                msg.cell.y = pos.y + j;
            
                distK! msg;
            }
        for (j = -k-1 ; j &gt;=  ; j--)
            {
                distK! msg;
            }
        for ()
            {
                distK! msg;
            }
        for ()
            {
                distK! msg;
            }
    }               
void addToNear(x)
    {
        nearEnemies[nearEnemiesLen] = x;
        nearEnemiesLen++;
    }            
void shootTheBest() //gestire la questione del caso in cui non ci siano enemies (non si entra qua e non si attende dopo lo sparo)
    {
        int app[nearEnemiesLen], i, appLen=1, maxAge = nearEnemies[0].age, posFound;
        app[0] = 0;
        
        for (i = 1 ; i &lt; nearEnemiesLen ; i++)
            {
                if (nearEnemies.age[i] &gt; maxAge)
                    {
                        maxAge = nearEnemies.age[i];
                        appLen = 1;
                        app[0] = i;
                    }
                else
                    {
                        if (nearEnemies.age[i] &gt; maxAge)
                            {
                                app[appLen] = i;;
                                appLen++;
                            }
                    }
            }
        posFound = -1;
        for (i = 0 ; i &lt; appLen-1 ; i++)
            {
                if (nearEnemies[app[i]].type == SQUARE)
                    {
                        posFound = i;
                        break;  
                    }
            }
        TurretShootMessage msg;
        msg.power = config.inflictedDamage;
        if (posFound == -1)
            {
                msg.enemyID = nearEnemies[app[appLen-1]].id;
            }
        else
            {
                 msg.enemyID = nearEnemies[app[posFound]].id;
            }
        shoot_to_enemy! msg;
    }
void clearEnemies()
    {
        nearEnemiesLen=0;
    }</declaration>
		<location id="id9" x="-1122" y="-620">
			<label kind="invariant" x="-1132" y="-603">k=0</label>
		</location>
		<location id="id10" x="-901" y="-620">
		</location>
		<location id="id11" x="-671" y="-569">
			<label kind="invariant" x="-681" y="-552">T1=0</label>
		</location>
		<location id="id12" x="-671" y="-391">
		</location>
		<location id="id13" x="-1122" y="-399">
		</location>
		<init ref="id9"/>
		<transition id="id14">
			<source ref="id13"/>
			<target ref="id9"/>
			<label kind="guard" x="-1062" y="-510">k&gt;=r</label>
			<label kind="assignment" x="-1062" y="-476">k=0</label>
		</transition>
		<transition id="id15">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-789" y="-416">T1&gt;= &lt;DELAY&gt;</label>
			<nail x="-807" y="-374"/>
		</transition>
		<transition id="id16">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="select" x="-650" y="-573">shootTheBest</label>
			<label kind="assignment" x="-650" y="-522">incK()</label>
			<nail x="-629" y="-476"/>
		</transition>
		<transition id="id17">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="select" x="-915" y="-693">is_enemy_near? x</label>
			<label kind="synchronisation" x="-872" y="-651">T1 = 0</label>
			<label kind="assignment" x="-901" y="-671">addToNear(x)</label>
			<nail x="-927" y="-654"/>
			<nail x="-876" y="-654"/>
		</transition>
		<transition id="id18">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-782" y="-620">T1&gt;=200</label>
		</transition>
		<transition id="id19">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="-1088" y="-646">lookForEnemies(k)</label>
		</transition>
	</template>
	<template>
		<name>enemy</name>
		<declaration>            
            const int type;
            const int CIRCLE_ENEMY_TYPE = 0;
            const int SQUARE_ENEMY_TYPE = 1;
            process enemy(const int t, const int px, const int py)
                {
                    if (t &lt; 0 or t &gt; 1)
                        {
                            type = CIRCLE_ENEMY_TYPE;
                        }
                    else
                        {
                            type = t;
                        }
                    pos_x = px;
                    pos_y = py;
                }
            
    // enemies variables:
        cell pos;
        int en_life;
    // enemies parameters:
        //circles parameters:
            const int ce_st = 2;
            const int ce_s = 1;
            const int ce_h = 10;
            const int ce_d = 2;
        //square parameters:
            const int se_st = 3;
            const int se_s = 3;
            const int se_h = 20;
            const int se_d = 4;

cell_t next(cell_t cell)
            {
                cell_t res = cell;
                   
                switch (cell[0])
                    {
                        case 0:
                            if (cell[1] &lt;=3)
                                res[1] = 1;
                            else
                                if (cell[1] == 4)
                                    res[0] = 1
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            res[0] = cell[0] +1;
                            break;
                        case 7:
                            if (cell[1] == 4)
                                res[1] = cell[1] + uniform(-1,1); //controllare def.
                            else
                                if (cell[1] == 5 || cell[1] == 6)
                                    res[1] = cell[1] + 1;
                                else
                                    if (cell[1] == 3 || cell[1] == 2)
                                        res[1] = cell[1] - 1;
                                    else
                                        if (cell[1] == 7 || cell[1] == 1)
                                            res[0] = res[0] + 1
                            break;
                        case 8:
                        case 9:
                            if (cell[1] == 7 || cell[1] == 1)
                                res[0] = cell[0] + 1;
                            break;
                        case 10:
                                if (cell[1] == 7)
                                    //con uniform
                                else
                                    if (cell[1] == 6 || cell[1] == 5)
                                        res[1] = cell[1] - 1;
                                    else
                                        if (cell[1] == 1)
                                            res[0] = cell[0] + 1;
                            break;
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                            if (cell[1] == 7 || cell[1] == 1 || cell[1] == 4)
                                res[0] = cell[0] + 1;
                            break;
                        case 15:
                            if (cell[1] &lt; 4 &amp;&amp; cell[1] &gt;= 1)
                                res[1] = cell[1] + 1;
                            else
                                if (cell[1] &gt; 4 &amp;&amp; cell[1] &lt;= 7)
                                    res[1] = cell[1] - 1;
                            break;
                    }
                
                return (res);
            }</declaration>
		<location id="id20" x="-450" y="-161">
		</location>
		<location id="id21" x="-263" y="-170">
		</location>
		<location id="id22" x="-391" y="17">
		</location>
		<location id="id23" x="-59" y="-68">
		</location>
		<init ref="id20"/>
		<transition id="id24">
			<source ref="id20"/>
			<target ref="id20"/>
			<nail x="-518" y="-170"/>
			<nail x="-493" y="-119"/>
		</transition>
		<transition id="id25">
			<source ref="id21"/>
			<target ref="id23"/>
		</transition>
		<transition id="id26">
			<source ref="id22"/>
			<target ref="id23"/>
		</transition>
		<transition id="id27">
			<source ref="id20"/>
			<target ref="id22"/>
		</transition>
		<transition id="id28">
			<source ref="id22"/>
			<target ref="id22"/>
			<nail x="-289" y="17"/>
			<nail x="-298" y="51"/>
		</transition>
		<transition id="id29">
			<source ref="id22"/>
			<target ref="id22"/>
			<nail x="-476" y="51"/>
			<nail x="-485" y="17"/>
		</transition>
		<transition id="id30">
			<source ref="id22"/>
			<target ref="id22"/>
			<nail x="-417" y="93"/>
			<nail x="-340" y="76"/>
		</transition>
		<transition id="id31">
			<source ref="id21"/>
			<target ref="id21"/>
			<nail x="-246" y="-263"/>
			<nail x="-204" y="-229"/>
		</transition>
		<transition id="id32">
			<source ref="id21"/>
			<target ref="id21"/>
			<nail x="-357" y="-238"/>
			<nail x="-280" y="-246"/>
		</transition>
		<transition id="id33">
			<source ref="id20"/>
			<target ref="id20"/>
			<nail x="-416" y="-212"/>
			<nail x="-484" y="-221"/>
			<nail x="-467" y="-187"/>
		</transition>
		<transition id="id34">
			<source ref="id21"/>
			<target ref="id20"/>
			<nail x="-348" y="-110"/>
		</transition>
		<transition id="id35">
			<source ref="id20"/>
			<target ref="id21"/>
		</transition>
	</template>
	<system>main_tower = main_tower();
circle(x, y) = enemy(CIRCLE_ENEMY_TYPE, x, y);
square(x, y) = enemy(SQUARE_ENEMY_TYPE, x, y);
basic_turret = turret(BASIC_TURRET_TYPE);
cannon_turret = turret(CANNON_TURRET_TYPE);
sniper_turret = turret(SNIPER_TURRET_TYPE);

system
    MT = main_tower; //poi vanno istanziati tutti gli altri

//broadcast channels:
    


</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
