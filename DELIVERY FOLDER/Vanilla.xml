<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>const int MAX_ENEMIES := 6; //how many enemies will eventually get into the match
const int MAX_TURRETS := 7; //the maximum number of turrets that can be placed on the map

//map's definitions:

const int MAX_CELL_X := 15;
const int MIN_CELL_X := 0;
const int MAX_CELL_Y := 7;
const int MIN_CELL_Y := 0;
  
typedef struct {
    int[MIN_CELL_X,MAX_CELL_X] x;
    int[MIN_CELL_Y,MAX_CELL_Y] y;
} Cell;

const Cell turrets_board[MAX_TURRETS] := {{8,6},{14,6},{5,5},{11,5},{2,3},{8,2},{14,2}}; //feasible turrets spots

const Cell MAIN_POS := {15,4}; //MT spot
const Cell START_POS := {0,0}; //enemys starting spot

const int[25,25] MAX_PATH_LENGTH := 25; //length of the maximum path between START_POS and MAIN_POS

//configurations definitions:

typedef struct {
    int health;
} MTConfiguration;

typedef struct {
    int spawningTime;
    int speed;
    int health;
    int damage;
    bool kind; //necessary to distinguish between squares and circles
} EnemyConfiguration;

typedef struct {
    int range;
    int speed;
    int damage;
} TurretConfiguration;

const EnemyConfiguration CIRCLE := {2, 1, 10, 2, false};
const EnemyConfiguration SQUARE := {3, 3, 20, 4, true};

const TurretConfiguration BASIC := {2,2,2};
const TurretConfiguration CANNON := {1,7,5};
const TurretConfiguration SNIPER := {4,20,8};

const MTConfiguration MT := {10};

// shoot-related definitions:

const int[-1,-1] SPECIAL_ID := -1;
typedef int[SPECIAL_ID,MAX_ENEMIES-1] EnemyID_t; //"SPECIAL_ID" id is reserved

typedef struct {
    Cell pos; //actual position of the enemy
    int entering; //instant in which the enemy spawned
    bool kind; //"true" for SQUARE, "false" for CIRCLE
    bool targetable; //indicates if the enemy is targettable at the moment
} EnemyRecord;

typedef struct {
    EnemyID_t id; //id of the targetted enemy
    int damage; //damage for the targetted enemy
} TargetRecord;

EnemyRecord shoot_table[MAX_ENEMIES]; //each enemy has a record where to place all the infos necessary to be targetted by turrets
TargetRecord target_record := {SPECIAL_ID,0}; //an enemy takes "damage" off its life if "target_record.id" corresponds to its id

int mt_life := MT.health; //MT can be simply modeled as a variable to decrement after a successful enemy shoot

int[0,MAX_ENEMIES] left_enemies := MAX_ENEMIES; //how many enemies are currently alive or about to spawn
int[0,MAX_ENEMIES] targetable_enemies := 0; //how many enemies are currently targettable (it can be also computed by counting the "targettable"
                                             //flags in "shoot_table", it's defined only for efficiency purposes (no need from turrets to scan
                                             //"shoot_table" to verify the presence of targettable enemies)

urgent broadcast chan SHOOT_TO_ENEMY; //sender: turret; receiver: enemy
urgent broadcast chan SHOOT_TO_MT; //sender: enemy, receiver: -- (only to make the shot to the MT "urgent")

//useful procedures:

bool isRed (Cell c)
/**
    Given a cell, checks if a cell is a feasible enemy spot

    @input  c the cell to check
    @return   "true" if "c" is a red cell ("false" otherwise)
*/
    {
        if (c.y == 7)
            {
                return (c.x&gt;=7 &amp;&amp; c.x&lt;=15);
            } 
        if (c.y == 6 || c.y == 5)
            {
                return (c.x == 7 || c.x == 10 || c.x == 15);
            }
        if (c.y == 4)
            {
                return (c.x != 8 &amp;&amp; c.x != 9);
            }
        if (c.y == 3 || c.y == 2)
            {
                return (c.x == 0 || c.x == 7 || c.x == 15);
            }
        if (c.y == 1)
            {
                return (c.x == 0 || (c.x &gt;=7 &amp;&amp; c.x&lt;=15));
            }
        if (c.y == 0)
            {
                return (c.x == 0);
            }

        return (false);
    }
int dist(const Cell c1, const Cell c2)
/**
    Given two cells, calculates the Chebyshev distance between them

    @input  c1 the first cell
    @input  c2 the second cell
    @return    the distance between c1 and c2
*/
    {
        int[MIN_CELL_X,MAX_CELL_X] v1=abs(c1.x - c2.x);
        int[MIN_CELL_Y,MAX_CELL_Y] v2=abs(c1.y - c2.y);
     
        return (v1&gt;=v2 ? v1 : v2);
    }
bool matchEnded()
/**
    It checks if there are no more enemy that are (or may be) available

    @return "true" if the match is ended ("false" otherwise)
*/
    {
        return (left_enemies == 0);
    }</declaration>
	<template>
		<name>compactEnemy</name>
		<parameter>const EnemyID_t id, const int speed, int health, const int damage, const int spawningTime, const bool kind</parameter>
		<declaration>clock x; //clock to count the spawning delay and the speed delay

clock trip_time; //clock to count how many time units are needed (after the spawn) to reach the MT
Cell pos; //enemy's current position on the map
int[0,2] chosenPath := 0; //which one of the three paths was non-deterministically chosen at spawning time

void initialize(const int[0,2] i)
/**
    initializes the shoot_table record

    @input i the "index" of the chosen path
*/
    {
        pos = START_POS; //(redoundant)
        chosenPath = i;

        //shoot_table record update:
            shoot_table[id].kind = kind;
            shoot_table[id].entering = spawningTime;
            shoot_table[id].targetable = true;
            shoot_table[id].pos = pos;

        targetable_enemies++;
        
        x = 0;
        trip_time = 0;
    }
void shoot()
/**
    implements the shot to the MT
*/
    {
        if (mt_life &gt; 0)
            mt_life = mt_life - damage;
    }
void dismiss ()
/**
    implements all the operations an enemy has to do once it has to leave the map
*/
    {
       left_enemies--;
       shoot_table[id].targetable = false;
       targetable_enemies--;
    }
void takeDamage ()
/**
    implements what to do once an enemy is shot
*/
    {
        if (target_record.id == id) //if the enemy is the one targetted by the shoot
            {
                health = health - target_record.damage; //takes the damage off
                target_record.damage = 0; //resets the damage
                target_record.id = SPECIAL_ID; //reset the target
                if (health &lt;= 0) //if the eneny is dead, it leaves the map
                    {
                        dismiss();
                    }
            }
        //the procedure is called only in transitions with the guard "health&gt;0", this ensures that "dismiss()" cannot be called multiple times
    }
void next()
/**
    calculates the next position of an enemy based on the current position and
    the "chosenPath" (note that the complexity of the procedure is constant).
*/
    {  
          if (pos.x == 0)
            {
                if (pos.y &lt;=3)
                    pos.y = pos.y+1;
                else
                    if (pos.y == 4)
                        pos.x = 1;
                return;
            }
        if (pos.x &gt;=1 &amp;&amp; pos.x &lt;= 6)
            {
                pos.x = pos.x +1;
                return;
            }
        if (pos.x == 7)
            {
                if (pos.y == 4)
                    {
                        if (chosenPath == 0 || chosenPath == 1) //the "non-deterministic choice" now is not non-deterministic anymore since it was
                                                                //non-deterministically taken "a priori" in the initialization step
                            pos.y = pos.y + 1;
                        else
                            pos.y = pos.y - 1;
                    }
                else
                    if (pos.y == 5 || pos.y == 6)
                        pos.y = pos.y + 1;
                    else
                        if (pos.y == 3 || pos.y == 2)
                            pos.y = pos.y - 1;
                        else
                            if (pos.y == 7 || pos.y == 1)
                                pos.x = pos.x + 1;
                return;  
            }
        if (pos.x &gt;= 8 &amp;&amp; pos.x &lt;= 9)
            {
                if (pos.y == 7 || pos.y == 1)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 10)
            {
                if (pos.y == 7)
                    {
                        if (chosenPath == 0)
                            pos.y = pos.y - 1;
                        else
                            pos.x = pos.x + 1;
                    }
                else
                    if (pos.y == 6 || pos.y == 5)
                        pos.y = pos.y - 1;
                    else
                        if (pos.y == 1 || pos.y == 4)
                            pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 11 &amp;&amp; pos.x &lt;= 14)
            {
                if (pos.y == 7 || pos.y == 1 || pos.y == 4)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 15)
            {
                if (pos.y &lt; 4 &amp;&amp; pos.y &gt;= 1)
                    pos.y = pos.y + 1;
                else
                    if (pos.y &gt; 4 &amp;&amp; pos.y &lt;= 7)
                        pos.y = pos.y - 1;
                return;
            }
    }
void move()
/**
    it implements all the actions an enemy has to perform to move (change of pos and update of shoot_table record)
*/
    {
        next();
        shoot_table[id].pos=pos;
        x=0;
    }</declaration>
		<location id="id0" x="408" y="442" color="#00ff00">
			<name x="383" y="391">OnTrip</name>
			<label kind="invariant" x="383" y="408">x&lt;=speed</label>
			<label kind="comments" x="-119" y="901">OnTrip:

An enemy stays in this state (in the sense that only takes self-transitions) as long as MT is not reached and health&gt;0:
-&gt; every "speed" time instants it has to move of one cell and update the shoot_table record;
-&gt; if a message is received on "SHOOT_TO_ENEMY" (provided that it is alive) it executes "takeDamage"
   to process the possibly received shoot ("takeDamage" is also responsible of calling "dismiss").</label>
		</location>
		<location id="id1" x="-51" y="204" color="#00ffff">
			<name x="-102" y="170">BeforeSpawn</name>
			<label kind="invariant" x="-110" y="221">x&lt;=spawningTime</label>
			<label kind="comments" x="-119" y="561">BeforeSpawn:

An enemy starts its execution from this state, where it stays for an amount of time exactly equal to "spawningTime" before leaving.

Since in this state the "shoot_table[id].targettable" is set to false, it can't be targetted by turrets.

Once the spawningTime has expired, there are three possible transition through "OnTrip" and what changes between them is simply
the value assigned to the variable "chosenPath":
-&gt; 0: the choice in junction (7,4) is "up" and the choice in junction (10,7) is "down";
-&gt; 1: the choice in junction (7,4) is "up" and the choice in junction (10,7) is "right";
-&gt; 2: the choice in junction (7,4) is "down".

In other words, the path to the MT an enemy will non-deterministically take is calculated right after the spawn and not
upon arriving at a junction.</label>
		</location>
		<location id="id2" x="858" y="442" color="#ffa500">
			<name x="806" y="391">AfterShoot</name>
			<label kind="invariant" x="815" y="408">x&lt;=speed</label>
			<label kind="comments" x="-119" y="1028">AfterShoot:

Once the enemy shot, it stays in this state until the delay expires and then it will leave the map (if not killed beforehands).</label>
		</location>
		<location id="id3" x="578" y="212" color="#ff0000">
			<name x="484" y="220">Dismissed</name>
			<label kind="comments" x="-119" y="1155">Dismissed:

It is only a well-state where the enemy arrives when it "leaves the map". The self-loop is kept to prevent deadlocks.</label>
		</location>
		<init ref="id1"/>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="25" y="374">x&gt;=spawningTime</label>
			<label kind="assignment" x="161" y="374">initialize(2)</label>
			<nail x="-51" y="399"/>
			<nail x="357" y="399"/>
			<nail x="357" y="442"/>
		</transition>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="526" y="144">matchEnded()</label>
			<nail x="603" y="169"/>
			<nail x="552" y="169"/>
		</transition>
		<transition id="id6">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="697" y="280">health&lt;=0</label>
			<nail x="858" y="306"/>
			<nail x="578" y="306"/>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="908" y="433">health&gt;0</label>
			<label kind="synchronisation" x="908" y="416">SHOOT_TO_ENEMY?</label>
			<label kind="assignment" x="908" y="450">takeDamage()</label>
			<nail x="900" y="425"/>
			<nail x="900" y="467"/>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="646" y="187">x&gt;=speed &amp;&amp; health&gt;0</label>
			<label kind="assignment" x="697" y="212">dismiss()</label>
			<nail x="858" y="212"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="416" y="289">health&lt;=0</label>
			<nail x="408" y="212"/>
		</transition>
		<transition id="id10">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="433" y="493">health&gt;0</label>
			<label kind="synchronisation" x="433" y="476">SHOOT_TO_ENEMY?</label>
			<label kind="assignment" x="433" y="510">takeDamage()</label>
			<nail x="416" y="484"/>
			<nail x="442" y="467"/>
		</transition>
		<transition id="id11">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="51" y="467">x&gt;=speed &amp;&amp; pos!=MAIN_POS &amp;&amp; health&gt;0</label>
			<label kind="assignment" x="323" y="484">move()</label>
			<nail x="374" y="467"/>
			<nail x="399" y="484"/>
		</transition>
		<transition id="id12">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="25" y="331">x&gt;=spawningTime</label>
			<label kind="assignment" x="161" y="331">initialize(2)</label>
			<nail x="-51" y="357"/>
			<nail x="357" y="357"/>
			<nail x="357" y="391"/>
			<nail x="357" y="442"/>
		</transition>
		<transition id="id13">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="26" y="289">x&gt;=spawningTime</label>
			<label kind="assignment" x="162" y="289">initialize(0)</label>
			<nail x="-51" y="315"/>
			<nail x="357" y="315"/>
			<nail x="357" y="442"/>
		</transition>
		<transition id="id14">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="25" y="250">x&gt;=spawningTime</label>
			<label kind="assignment" x="161" y="250">initialize(1)</label>
			<nail x="-52" y="275"/>
			<nail x="356" y="275"/>
			<nail x="357" y="442"/>
		</transition>
		<transition id="id15">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="527" y="416">health&gt;0 &amp;&amp; pos==MAIN_POS</label>
			<label kind="synchronisation" x="586" y="399">SHOOT_TO_MT!</label>
			<label kind="assignment" x="586" y="442">shoot(),x=0</label>
		</transition>
	</template>
	<template>
		<name>turret</name>
		<parameter>const int id, const TurretConfiguration config</parameter>
		<declaration>const int range = config.range;
const int speed = config.speed;
const int damage = config.damage;
clock y;

void shoot (const EnemyID_t targetId)
/**
    Given an id of an enemy, shoots to it
    
    @input the id of the enemy to shoot
*/
    {
        target_record.id = targetId;
        target_record.damage = damage;
        y=0;
    }
bool canShoot()
/**
    It checks whether there are targettable enemies inside the shooting range.

    The complexity of the procedure is linear in the number of enemies.

    @return "true" if there is at least one alive enemy in the shooting range ("false" otherwise)
*/
    {
        int[0,MAX_ENEMIES] i, cont;
        
        cont=0;
        for (i = 0 ; i&lt;MAX_ENEMIES &amp;&amp; cont&lt;targetable_enemies; i++)
            {
                if (shoot_table[i].targetable)
                    {
                        cont++;
                        if (dist(shoot_table[i].pos, turrets_board[id])&lt;=range)
                           {
                               return (true);
                           }
                    }
            }

        return (false);
    }
void target()
/**
    Implements the entire decision process that a turret takes once it recognizes that at least one enemy
    is inside its shooting range.
    First, the turrets finds the first targettable enemy in the shooting range. Then it scans the other targettable enemys
    in the shooting range to find the preffered one accordingly to the criterions given. At the end, if two enemy
    create a tie for distance and lifetimes:
    -&gt; only one of them is a square : the square is preffered;
    -&gt; no one of them is a square : the enemy with the lowest id is preffered;
    -&gt; no one of them is a circle : the enemy with the highest id is preffered.
    
    The complexity of the procedure is linear in the number of enemies.
*/
    {
        bool found;
        int[0,MAX_ENEMIES] i, cont=0;
        EnemyID_t target_id;
        int[MIN_CELL_X,MAX_CELL_X] target_dist, d;
        int target_entering;

        if (targetable_enemies &gt; 0)
            {
                i = 0;
                found = false;
                while (i &lt; MAX_ENEMIES &amp;&amp; !found)
                    {
                        if (shoot_table[i].targetable &amp;&amp; dist(shoot_table[i].pos, turrets_board[id])&lt;=range)
                            {
                                found = true;
                            }
                        i++;
                    }
                if (found)
                    {
                        target_id = i-1;
                        target_dist = dist(shoot_table[i-1].pos, turrets_board[id]);
                        target_entering = shoot_table[i-1].entering;
                        cont++;
                        for (i = i ; i&lt;MAX_ENEMIES &amp;&amp; cont &lt; targetable_enemies; i++)
                            {
                                if (shoot_table[i].targetable)
                                    {
                                        cont++;
                                        d = dist(shoot_table[i].pos, turrets_board[id]);
                                        if (d &lt;target_dist)
                                            {
                                                target_id = i;
                                                target_dist = d;
                                                target_entering = shoot_table[i].entering;
                                            }
                                        else
                                            {        
                                                if (d == target_dist)
                                                    {
                                                        if (shoot_table[i].entering &gt; target_entering)
                                                            {
                                                                target_id = i;
                                                                target_entering = shoot_table[i].entering;
                                                            }
                                                        else
                                                            {
                                                                if (target_entering == shoot_table[i].entering)
                                                                    {
                                                                        if (shoot_table[i].kind)
                                                                            {
                                                                                 target_id = i;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                       }
                            }

                        shoot (target_id);
                    }
            }   
    }</declaration>
		<location id="id16" x="-459" y="-306" color="#00ff00">
			<name x="-484" y="-340">ReadyToShoot</name>
			<label kind="comments" x="-1028" y="-178">ReadyToShoot:

The turret stays in this state as long as there are no enemies to shoot. Otherwise, the most preffered of them
is shot with "target".</label>
		</location>
		<location id="id17" x="-697" y="-306" color="#ffa500">
			<name x="-722" y="-340">Wait</name>
			<label kind="invariant" x="-782" y="-314">y&lt;=speed</label>
			<label kind="comments" x="-1028" y="-85">Wait:

The turret stays in this state as long as the speed delay has not expired. Once it is, it goes to ReadyToShoot and
looks for enemies to shoot.</label>
		</location>
		<init ref="id16"/>
		<transition id="id18">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-603" y="-221">y&gt;=speed</label>
			<nail x="-697" y="-221"/>
			<nail x="-459" y="-221"/>
		</transition>
		<transition id="id19">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-629" y="-348">canShoot()</label>
			<label kind="synchronisation" x="-637" y="-331">SHOOT_TO_ENEMY!</label>
			<label kind="assignment" x="-612" y="-306">target()</label>
			<nail x="-578" y="-306"/>
		</transition>
	</template>
	<system>const int N_CIRCLES = 3;

/*
    To change wave parameters:
    -&gt; set MAX_ENEMIES (in "Declarations") to the number of enemies of the wave;
    -&gt; set N_CIRCLES to the number of circles of the wave.
    
    To change a configuration:
    -&gt; instantiate a turret (of the type you want) and pass the index value that corresponds to the position you want for that
       turret in "turrets_board" (e.g. to place a "sniper" in position "{8,2}", use "turret(5,SNIPER)", since "turrets_board[5]={8,2}").

    To switch between configurations:
    -&gt; use comments below to comment/de-comment "system" and "ti" instructions.    
*/

circle(const int[0,N_CIRCLES-1] id) = compactEnemy(id, CIRCLE.speed, CIRCLE.health, CIRCLE.damage, id*CIRCLE.spawningTime, CIRCLE.kind);
square(const int[N_CIRCLES,MAX_ENEMIES-1] id) = compactEnemy(id, SQUARE.speed, SQUARE.health, SQUARE.damage, (id-N_CIRCLES)*SQUARE.spawningTime, SQUARE.kind);

basic(const int id)  = turret(id, BASIC);
cannon(const int id) = turret(id, CANNON);
sniper(const int id) = turret(id, SNIPER);

//NO TURRETS CONFIG
    /*
        system circle,square;
    */
//WITH TURRETS "Default" CONFIG
    
        t0 = cannon(0);
        t1 = cannon(1);
        t2 = basic(2);
        t3 = sniper(3);
        t4 = sniper(4);
        t5 = cannon(5);
        t6 = cannon(6);

        system circle,square,t0,t1,t2,t3,t4,t5,t6;
    
//WITH TURRETS "DownFromCannons" CONFIG
    /*
        t0 = cannon(0);
        t1 = cannon(1);
        t2 = cannon(2);
        t3 = basic(3);
        t4 = cannon(4);
        
        system circle,square,t0,t1,t2,t3,t4;
    */
//WITH TURRETS "DownFromSnipers" CONFIG
    /*
        t0 = cannon(0);
        t1 = cannon(1);
        t2 = sniper(2);
        t3 = basic(3);
        t4 = sniper(4);
        
        system circle,square,t0,t1,t2,t3,t4;
    */
//WITH TURRETS "Cannonphobia" CONFIG
    /*
        t0 = cannon(0);
        t1 = cannon(1);
        t2 = cannon(2);
        t3 = cannon(3);
        t4 = cannon(4);
        t5 = cannon(5);
        t6 = cannon(6);
        
        system circle,square,t0,t1,t2,t3,t4,t5,t6;
   */
//WITH TURRETS "Sniperphobia" CONFIG
    /*
        t0 = sniper(0);
        t1 = sniper(1);
        t2 = sniper(2);
        t3 = sniper(3);
        t4 = sniper(4);
        t5 = sniper(5);
        t6 = sniper(6);
        
        system circle,square,t0,t1,t2,t3,t4,t5,t6;
    */</system>
	<queries>
		<query>
			<formula>A[](not deadlock)</formula>
			<comment>[THIS QUERY VERIFIES PROPERTIES "I" AND "VII"]

In any state, the model must not be in deadlock.
This query will still work with turrets.</comment>
			<result outcome="success" type="quality" timestamp="2025-07-14 07:53:17 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt;(
	(forall(i:int[0,N_CIRCLES-1])          (circle(i).pos == MAIN_POS)) &amp;&amp;
	(forall(i:int[N_CIRCLES,MAX_ENEMIES-1])(square(i).pos == MAIN_POS))
)</formula>
			<comment>[THIS QUERY VERIFIES PROPERTY "II"]

Soon or later all enemies will always reach the MT.
Note that "E&lt;&gt;" could also be used since the case where "E&lt;&gt;" is satisfied and "A&lt;&gt;" not is the case where there is at least one path that does not lead all enemy to reach
the MT spot, and if we only want to verify that all enemies "can reach the MT", it does not mean that any enemy will eventually reach it in any possible path.
To be more precise, the query verifies that for any path there exists a state where all enemies are at MAIN_POS in the same time, which would be false in models where an enemy changes
its "pos" (for example, to "{-1,-1}") once it leaves the map (this is also the reason why we did not state this query with "OnTrip &amp;&amp; pos==MAIN_POS", since it is not true, neither with "E&lt;&gt;", that
exists a state in which all enemies arrive at MAIN_POS simultaneously).
This query MAY NOT work with turrets since some enemies may be killed before reaching the MT spot.</comment>
			<result outcome="success" type="quality" timestamp="2025-07-14 07:43:47 +0200">
			</result>
		</query>
		<query>
			<formula>A[](
	(forall(i:int[0,N_CIRCLES-1])          ((circle(i).OnTrip &amp;&amp; circle(i).pos == MAIN_POS) imply (circle(i).trip_time&lt;=(MAX_PATH_LENGTH*CIRCLE.speed)))) &amp;&amp;
	(forall(i:int[N_CIRCLES,MAX_ENEMIES-1])((square(i).OnTrip &amp;&amp; square(i).pos == MAIN_POS) imply (square(i).trip_time&lt;=(MAX_PATH_LENGTH*SQUARE.speed))))
)</formula>
			<comment>[THIS QUERY VERIFIES PROPERTIES "III" AND "IV"]

In any state of any path, if any enemy reaches the MT, its trip time must be less or equal than the product between the maximum path length and its speed.
This query will still work with turrets (turrets do not change the time limit to reach the MT).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-14 15:53:15 +0200">
			</result>
		</query>
		<query>
			<formula>A[](
	(forall(i:int[0,N_CIRCLES-1])          (shoot_table[i].targetable imply isRed(circle(i).pos))) &amp;&amp;
	(forall(i:int[N_CIRCLES,MAX_ENEMIES-1])(shoot_table[i].targetable imply isRed(square(i).pos)))
)</formula>
			<comment>[THIS QUERY VERIFIES PROPERTY "V"]

In any state of any possible path, if an enemy is present of the map (i.e. it is targettable) it must be on a red spot.

Note that since:
-&gt; enemies that are about to spawn have "pos = {0,0}";
-&gt; enemies that are dead have "pos" equal to the one they were when they were killed;
the query can be satisfied also if we remove "shoot_table[i].targettable". We wanted to state it anyways because formally is interesting to check enemies positions only when they
are present on the map (we model the "leaving from the map" only as "shoot_table[i].targettable == false").

This query will still work with turrets (since the fact that enemies can be shot does not implies that they leave red spots and in case they are killed they are not targettable
anymore).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-14 07:45:23 +0200">
			</result>
		</query>
		<query>
			<formula>A[](mt_life&gt;0)</formula>
			<comment>[THIS QUERY VERIFIES PROPERTY "VI"]

This query is satisfied if and only if the MT is alive in any state of any possible path, therefore it is satisfied if and only if the configuration is "winning"
(a configuration is "winning" there is no possibility that the MT is defeated).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-14 07:47:50 +0200">
			</result>
		</query>
		<query>
			<formula>E[](mt_life&gt;0)</formula>
			<comment>This query aims to verify that a configuration is at least weakly-winning (at least one path must lead to a winning execution).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-10 17:14:13 +0200">
			</result>
		</query>
		<query>
			<formula>A[](mt_life==MT.health)</formula>
			<comment>This query aims to verify that a configuration is strongly-winning (MT must be never shot in any game execution).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-10 17:18:36 +0200">
			</result>
		</query>
		<query>
			<formula>E[](mt_life==MT.health)</formula>
			<comment>This query aims to verify that a configuration is weakly-strongly-winning (MT must be never shot in at least one game execution).</comment>
			<result outcome="success" type="quality" timestamp="2025-07-10 17:16:03 +0200">
			</result>
		</query>
		<query>
			<formula>inf: (
	(((sum(i : int[0,N_CIRCLES-1]) (dist(circle(i).pos,MAIN_POS)))) +
	((sum(i : int[N_CIRCLES,MAX_ENEMIES-1]) (dist(square(i).pos,MAIN_POS)))))/MAX_ENEMIES)</formula>
			<comment>This query calculates the ADMT ("Averange Distance from MT") index of the configuration.</comment>
			<result outcome="success" type="quantity" value="0" timestamp="2025-07-10 19:27:00 +0200">
				<details>0</details>
			</result>
		</query>
		<query>
			<formula>sup{matchEnded()}:((sum(i : int[0,N_CIRCLES-1]) (circle(i).Dismissed &amp;&amp; circle(i).health&gt;0)) + (sum(i : int[N_CIRCLES,MAX_ENEMIES-1]) (square(i).Dismissed &amp;&amp; square(i).health&gt;0)))
	</formula>
			<comment>This query calculates the SE ("Survived Enemies") index of the configuration.</comment>
			<result outcome="success" type="quantity" value="6" timestamp="2025-07-10 19:25:52 +0200">
				<details>6</details>
			</result>
		</query>
		<query>
			<formula>sup:(((sum(i : int[0,N_CIRCLES-1]) ((dist(circle(i).pos,MAIN_POS)==0)*(circle(i).chosenPath!=2)))+(sum(i : int[N_CIRCLES,MAX_ENEMIES-1]) ((dist(square(i).pos,MAIN_POS)==0)*(square(i).chosenPath!=2)))))
	</formula>
			<comment>This query calculates the CUPE ("Completed Upper Paths Enemies") of the configuration (it used the "dist" calculation instead of directly comparing "pos" with "MAIN_POS"
since it raised an error in Uppaal 5.0.0).</comment>
			<result outcome="success" type="quantity" value="0" timestamp="2025-07-10 20:14:55 +0200">
				<details>0</details>
			</result>
		</query>
		<query>
			<formula>sup:(((sum(i : int[0,N_CIRCLES-1]) ((dist(circle(i).pos,MAIN_POS)==0)*(circle(i).chosenPath==2)))+(sum(i : int[N_CIRCLES,MAX_ENEMIES-1]) ((dist(square(i).pos,MAIN_POS)==0)*(square(i).chosenPath==2)))))</formula>
			<comment>This query calculates the CLPE ("Completed Lower Paths Enemies") of the configuration (it used the "dist" calculation instead of directly comparing "pos" with "MAIN_POS"
since it raised an error in Uppaal 5.0.0).</comment>
		</query>
		<query>
			<formula>A[]((matchEnded() &amp;&amp; (mt_life==MT.health)) imply ((forall(i:int[0,N_CIRCLES-1]) circle(i).health&lt;=0) &amp;&amp; (forall(i:int[N_CIRCLES,MAX_ENEMIES-1]) square(i).health &lt;=0)))</formula>
			<comment>THIS QUERY WAS ONLY WRITTEN FOR DEBUGGING PURPOSES (TESTS THAT A CONFIGURATION THAT ALWAYS DOES NOT LET ENEMIES TO SHOOT THE MT, THEY ARE ALL DEAD ONCE THE MATCH IS ENDED)</comment>
			<result outcome="success" type="quality" timestamp="2025-07-10 11:49:16 +0200">
			</result>
		</query>
		<query>
			<formula>A[](left_enemies&gt;=0)</formula>
			<comment>THIS QUERY WAS ONLY WRITTEN FOR DEBUGGING PURPOSES (USED TO TEST IF LEFT_ENEMIES HAS ALWAYS A VALID VALUE)</comment>
			<result outcome="success" type="quality" timestamp="2025-07-10 11:30:45 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt;(
	(forall(i:int[0,N_CIRCLES-1])          (circle(i).Dismissed)) &amp;&amp;
	(forall(i:int[N_CIRCLES,MAX_ENEMIES-1])(square(i).Dismissed))
)</formula>
			<comment>THIS QUERY WAS ONLY WRITTEN FOR DEBUGGING PURPOSES (USED TO TEST THAT WITHOUT TURRETS, ALL ENEMIES EVENTUALLY BECOME DISMISSED ALL TOGETHER)</comment>
		</query>
	</queries>
</nta>
