<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>//type definitions:

const int[5,5] MAX_ENEMIES := 5; //how many enemies will eventually get into the match

typedef int[0,MAX_ENEMIES] id_t;
typedef int[0,7] idt_t;
typedef int[0,100] life_t;

typedef struct {
    int[-1,15] x;
    int[-1,15] y;
} Cell;

typedef struct {
    int health;
} MainTowerConfiguration;

typedef struct {
    int speed;
    int health;
    int damage;
    int spawningTime;
    bool kind;
} EnemyConfiguration;

typedef struct {
    int range;
    int speed;
    int damage;
} TurretConfiguration;

typedef struct {
    Cell pos;
    life_t lifeTime;
    bool kind;
    bool available;
} EnemyRecord;

typedef struct {
    int id;
    int damage;
} TargetRecord;
//configuration definitions:

const MainTowerConfiguration MT := {10};

const EnemyConfiguration SQUARE := {3, 20, 4, 3, true};
const EnemyConfiguration CIRCLE := {1, 10, 2, 2, false};

const TurretConfiguration BASIC := {2,2,2};
const TurretConfiguration CANNON := {1,7,5};
const TurretConfiguration SNIPER := {4,20,8};

//map definitions

const Cell MAIN_POS = {15,4};

const Cell TURRET0_POS = {5,5};
const Cell TURRET1_POS = {8,2};
const Cell TURRET2_POS = {8,6};
const Cell TURRET3_POS = {14,2};
const Cell TURRET4_POS = {14,6};
const Cell TURRET5_POS = {2,3};
const Cell TURRET6_POS = {11,5};

const Cell INVALID_POS = {-1,-1};
const Cell START_POS = {0,0};

const int[25,25] MAX_PATH_LENGTH = 25;

/*
const Cell paths[MAX_PATH_LENGTH+1][3] = {
    {{0,0},{0,1},{0,2},{0,3},{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{6,4},{7,4},{7,5},{7,6},{7,7},{8,7},{9,7},{10,7},{11,7},{12,7},{13,7},{14,7},{15,7},{15,6},{15,5},{15,4}},
    {{0,0},{0,1},{0,2},{0,3},{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{6,4},{7,4},{7,5},{7,6},{7,7},{8,7},{9,7},{10,7},{10,6},{10,5},{10,4},{11,4},{12,4},{13,4},{14,4},{15,4}},
    {{0,0},{0,1},{0,2},{0,3},{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{6,4},{7,4},{7,3},{7,2},{7,1},{8,1},{9,1},{10,1},{11,1},{12,1},{13,1},{14,1},{15,1},{15,2},{15,3},{15,4}}
};
*/

//wave parameters

int[-20,MT.health] mt_life := MT.health;


int[0,MAX_ENEMIES] ended_enemies := MAX_ENEMIES; //how many enemies are currently alive or about to spawn
int[0,MAX_ENEMIES] available_enemies := 0; //how many enemies are currently available (already spawned and not dead)

EnemyRecord shoot_table[MAX_ENEMIES];
TargetRecord target_record := {-1,0};

urgent broadcast chan SHOOT_TO_ENEMY;

bool isValid (Cell c)
    {
        if (c == INVALID_POS)
            {
                return (true);
            }
        if (c.y == 7)
            {
                return (c.x&gt;=7 &amp;&amp; c.x&lt;=15);
            } 
        if (c.y == 6 || c.y == 5)
            {
                return (c.x == 7 || c.x == 10 || c.x == 15);
            }
        if (c.y == 4)
            {
                return (c.x != 8 &amp;&amp; c.x != 9);
            }
        if (c.y == 3 || c.y == 2)
            {
                return (c.x == 0 || c.x == 7 || c.x == 15);
            }
        if (c.y == 1)
            {
                return (c.x == 0 || (c.x &gt;=7 &amp;&amp; c.x&lt;=15));
            }
        if (c.y == 0)
            {
                return (c.x == 0);
            }

        return (false);
    }
bool matchEnded()
    {
        return (ended_enemies == 0 || mt_life&lt;=0);
    }</declaration>
	<template>
		<name>compactEnemy</name>
		<parameter>const id_t id, const int speed, int health, const int damage, const int spawningTime, const bool kind</parameter>
		<declaration>clock x;
clock z;

Cell pos := INVALID_POS;
int[0,2] chosenPath := 0;

void initialize(const int[0,2] i)
    {
        pos = START_POS;
        chosenPath = i;

        shoot_table[id].lifeTime = 0;
        shoot_table[id].kind = kind;
        shoot_table[id].available = true;
        shoot_table[id].pos = pos;
        shoot_table[id].lifeTime = 0;

        available_enemies++;
        
        x = 0;
        z = 0;
    }
void shoot()
    {
        if (mt_life &gt; 0)
            mt_life = mt_life - damage;
    }
void dismiss ()
    {
       shoot_table[id].available = false;
       ended_enemies--;
       available_enemies--;
    }
void takeDamage ()
    {
        
        if (target_record.id == id)
            {
                health = health - target_record.damage;
                target_record.damage = 0;
                target_record.id = -1;
            }
    }

void updateRecord ()
    {
        shoot_table[id].pos = pos;
        shoot_table[id].lifeTime++;
    }
void next()
    {     
          if (pos.x == 0)
            {
                if (pos.y &lt;=3)
                    pos.y = pos.y+1;
                else
                    if (pos.y == 4)
                        pos.x = 1;
                
                return;
            }
        if (pos.x &gt;=1 &amp;&amp; pos.x &lt;= 6)
            {
                pos.x = pos.x +1;
                return;
            }
        if (pos.x == 7)
            {
                if (pos.y == 4)
                    {
                        if (chosenPath == 0 || chosenPath == 1)
                            pos.y = pos.y + 1;
                        else
                            pos.y = pos.y - 1;
                    }
                else
                    if (pos.y == 5 || pos.y == 6)
                        pos.y = pos.y + 1;
                    else
                        if (pos.y == 3 || pos.y == 2)
                            pos.y = pos.y - 1;
                        else
                            if (pos.y == 7 || pos.y == 1)
                                pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 8 &amp;&amp; pos.x &lt;= 9)
            {
                if (pos.y == 7 || pos.y == 1)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 10)
            {
                if (pos.y == 7)
                    {
                        if (chosenPath == 0)
                            pos.y = pos.y - 1;
                        else
                            pos.x = pos.x + 1;
                    }
                else
                    if (pos.y == 6 || pos.y == 5)
                        pos.y = pos.y - 1;
                    else
                        if (pos.y == 1 || pos.y == 4)
                            pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 11 &amp;&amp; pos.x &lt;= 14)
            {
                if (pos.y == 7 || pos.y == 1 || pos.y == 4)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 15)
            {
                if (pos.y &lt; 4 &amp;&amp; pos.y &gt;= 1)
                    pos.y = pos.y + 1;
                else
                    if (pos.y &gt; 4 &amp;&amp; pos.y &lt;= 7)
                        pos.y = pos.y - 1;
                return;
            }
    }</declaration>
		<location id="id0" x="297" y="425" color="#ffa500">
			<label kind="invariant" x="287" y="442">x&lt;=speed &amp;&amp; z&lt;=1</label>
		</location>
		<location id="id1" x="-102" y="425" color="#00ff00">
			<label kind="invariant" x="-153" y="434">x&lt;=spawningTime</label>
		</location>
		<location id="id2" x="297" y="195" color="#000000">
			<name x="272" y="161">ended</name>
			<label kind="invariant" x="287" y="212">x&lt;=speed</label>
		</location>
		<location id="id3" x="476" y="195">
		</location>
		<init ref="id1"/>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="357" y="340">z==1 &amp;&amp; !matchEnded() &amp;&amp; health&gt;0 &amp;&amp; pos!=MAIN_POS</label>
			<label kind="assignment" x="357" y="357">updateRecord(),z=0</label>
			<nail x="323" y="323"/>
			<nail x="357" y="365"/>
		</transition>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="348" y="170">x&gt;=speed</label>
			<label kind="assignment" x="340" y="195">dismiss()</label>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="467" y="289">health&lt;=0</label>
			<label kind="assignment" x="476" y="306">dismiss()</label>
			<nail x="416" y="357"/>
			<nail x="442" y="314"/>
		</transition>
		<transition id="id7">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="262" y="510">health&gt;0</label>
			<label kind="synchronisation" x="236" y="493">SHOOT_TO_ENEMY?</label>
			<label kind="assignment" x="245" y="527">takeDamage()</label>
			<nail x="279" y="493"/>
			<nail x="321" y="493"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="382" y="416">x&gt;=speed &amp;&amp; health&gt;0 &amp;&amp; pos!=MAIN_POS &amp;&amp; !matchEnded()</label>
			<label kind="assignment" x="382" y="433">next(),shoot_table[id].pos =pos,x=0</label>
			<nail x="348" y="459"/>
			<nail x="374" y="408"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-59" y="484">x==spawningTime</label>
			<label kind="assignment" x="17" y="518">initialize(2)</label>
			<nail x="-25" y="510"/>
			<nail x="187" y="510"/>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-59" y="323">x==spawningTime</label>
			<label kind="assignment" x="51" y="348">initialize(0)</label>
			<nail x="25" y="348"/>
			<nail x="187" y="348"/>
		</transition>
		<transition id="id11" color="#00ff00">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-59" y="399">x == spawningTime</label>
			<label kind="assignment" x="59" y="425">initialize(1)</label>
		</transition>
		<transition id="id12" color="#ffa500">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-110" y="255">pos == MAIN_POS &amp;&amp; health&gt;0 &amp;&amp; !matchEnded() &amp;&amp; z==0</label>
			<label kind="assignment" x="93" y="280">shoot(), x=0</label>
		</transition>
	</template>
	<template>
		<name>turret</name>
		<parameter>const idt_t id, const Cell pos, const int range, const int speed, const int damage</parameter>
		<declaration>clock y;

int dist(const Cell c1, const Cell c2)
    {
        if (abs(c1.x - c2.x)&gt;=abs(c1.y - c2.y))
            return (abs(c1.x - c2.x));
        else
            return (abs(c1.y - c2.y));
    }
void shoot (const id_t id)
    {
        target_record.id = id;
        target_record.damage = damage;
        y=0;
    }
void target()
    {
        bool found;
        int[0,MAX_ENEMIES] i, cont=0;
        id_t target_id;
        int[-1,15] target_dist, d;
        life_t target_lifeTime;

        if (available_enemies &gt; 0)
            {
                i = 0;
                found = false;
                while (i &lt; MAX_ENEMIES &amp;&amp; !found)
                    {
                        if (shoot_table[i].available &amp;&amp; dist(shoot_table[i].pos, pos)&lt;=range)
                            {
                                found = true;
                            }
                        i++;
                    }
                if (found)
                    {
                        target_id = i-1;
                        target_dist = dist(shoot_table[i-1].pos, pos);
                        target_lifeTime = shoot_table[i-1].lifeTime;
                        cont++;
                        for (i = i ; i&lt;MAX_ENEMIES &amp;&amp; cont &lt; available_enemies; i++)
                            {
                                if (shoot_table[i].available)
                                    {
                                        cont++;
                                        d = dist(shoot_table[i].pos, pos);
                                        if (d &lt;target_dist)
                                            {
                                                target_id = i;
                                                target_dist = d;
                                                target_lifeTime = shoot_table[i].lifeTime;
                                            }
                                        else
                                            {        
                                                if (d == target_dist)
                                                    {
                                                        if (shoot_table[i].lifeTime &lt; target_lifeTime)
                                                            {
                                                                target_id = i;
                                                                target_lifeTime = shoot_table[i].lifeTime;
                                                            }
                                                        else
                                                            {
                                                                if (target_lifeTime == shoot_table[i].lifeTime)
                                                                    {
                                                                        if (shoot_table[i].kind)
                                                                            {
                                                                                 target_id = i;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                       }
                            }

                        shoot (target_id);
                    }
        }   
    }
bool shootable()
    {
        int[0,MAX_ENEMIES] i, cont;
        
        cont=0;
        for (i = 0 ; i&lt;MAX_ENEMIES &amp;&amp; cont&lt;available_enemies; i++)
            {
                if (shoot_table[i].available)
                    {
                        cont++;
                        if (dist(shoot_table[i].pos, pos)&lt;=range)
                           {
                               return (true);
                           }
                    }
            }

        return (false);
    }
</declaration>
		<location id="id13" x="-459" y="-306">
		</location>
		<location id="id14" x="-637" y="-306">
			<label kind="invariant" x="-731" y="-306">y&lt;=speed</label>
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-586" y="-238">y&gt;=speed</label>
			<nail x="-552" y="-246"/>
		</transition>
		<transition id="id16">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-586" y="-348">shootable()</label>
			<label kind="synchronisation" x="-619" y="-323">SHOOT_TO_ENEMY!</label>
			<label kind="assignment" x="-612" y="-306">target()</label>
		</transition>
	</template>
	<system>circlec(const id_t id, const int coeff) = compactEnemy(id, CIRCLE.speed, CIRCLE.health, CIRCLE.damage, coeff*CIRCLE.spawningTime, CIRCLE.kind);
squarec(const id_t id, const int coeff) = compactEnemy(id, SQUARE.speed, SQUARE.health, SQUARE.damage, coeff*SQUARE.spawningTime, SQUARE.kind);
basic(const idt_t id, const Cell pos) = turret(id, pos, BASIC.range, BASIC.speed, BASIC.damage);
cannon(const idt_t id, const Cell pos) = turret(id, pos, CANNON.range, CANNON.speed, CANNON.damage);
sniper(const idt_t id, const Cell pos) = turret(id, pos, SNIPER.range, SNIPER.speed, SNIPER.damage);

enc0 = circlec(0, 1);
enc1 = squarec(1, 1);
enc2 = circlec(2, 2);
enc3 = squarec(3, 2);
enc4 = circlec(4, 3);
enc5 = squarec(5, 3);
t0 = basic(0, TURRET0_POS);
t1 = cannon(1, TURRET1_POS);
t2 = cannon(2, TURRET2_POS);
t3 = cannon(3, TURRET3_POS);
t4 = cannon(4, TURRET4_POS);
t5 = sniper(5, TURRET5_POS);
t6 = sniper(6, TURRET6_POS);

system enc0,enc1,enc2,enc3,enc4,t0,t1, t2,t3,t4,t5,t6;




</system>
	<queries>
		<query>
			<formula>A[](deadlock imply matchEnded())</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 15:12:38 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt;(enc0.pos == MAIN_POS)</formula>
			<comment/>
		</query>
		<query>
			<formula>A[](enc0.pos == MAIN_POS imply enc0.lifeTime&lt;=(MAX_PATH_LENGTH*(CIRCLE.speed+1)))</formula>
			<comment/>
		</query>
		<query>
			<formula>A[](enc1.pos == MAIN_POS imply enc1.lifeTime&lt;=(MAX_PATH_LENGTH*(SQUARE.speed+1)))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-21 07:56:09 +0200">
			</result>
		</query>
		<query>
			<formula>A[](isValid(enc0.pos))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 13:44:08 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt;(mt_life &gt; 0)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-24 19:15:20 +0200">
			</result>
		</query>
	</queries>
</nta>
