<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*
   -&gt; è giusto lo spawn?
   -&gt; chiarire la roba "winning or losing"
   -&gt; query "can reach the main tower" ha il problema che se la conf. è tale per cui la MT muore non è vero che tutti gli enemy possono raggiungere la MT
*/

//type definitions:

const int[6,6] MAX_ENEMIES := 6; //how many enemies will eventually get into the match

typedef int[0,MAX_ENEMIES] id_t;
typedef int[0,7] idt_t;
typedef int[0,100] life_t;

typedef struct {
    int[-1,15] x;
    int[-1,15] y;
} Cell;

typedef struct {
    int health;
} MainTowerConfiguration;

typedef struct {
    int speed;
    int health;
    int damage;
    int spawningTime;
    bool kind;
} EnemyConfiguration;

typedef struct {
    int range;
    int speed;
    int damage;
} TurretConfiguration;

typedef struct {
    Cell pos;
    life_t lifeTime;
    bool kind;
    bool available;
} EnemyRecord;

typedef struct {
    int id;
    int damage;
} TargetRecord;
//configuration definitions:

const MainTowerConfiguration MT := {10};

const EnemyConfiguration SQUARE := {3, 20, 4, 3, true};
const EnemyConfiguration CIRCLE := {1, 10, 2, 2, false};

const TurretConfiguration BASIC := {2,2,2};
const TurretConfiguration CANNON := {1,7,5};
const TurretConfiguration SNIPER := {4,20,8};

//map definitions

const Cell MAIN_POS = {15,4};

const Cell TURRET0_POS = {5,5};
const Cell TURRET1_POS = {8,2};
const Cell TURRET2_POS = {8,6};
const Cell TURRET3_POS = {14,2};
const Cell TURRET4_POS = {14,6};
const Cell TURRET5_POS = {2,3};
const Cell TURRET6_POS = {11,5};

const Cell INVALID_POS = {-1,-1};
const Cell START_POS = {0,0};

const int[25,25] MAX_PATH_LENGTH = 25;

//wave parameters

int[-20,MT.health] mt_life := MT.health;

int[0,MAX_ENEMIES] ended_enemies := MAX_ENEMIES; //how many enemies are currently alive or about to spawn
int[0,MAX_ENEMIES] available_enemies := 0; //how many enemies are currently available (already spawned and not dead)

EnemyRecord shoot_table[MAX_ENEMIES];
TargetRecord target_record := {-1,0};

urgent broadcast chan SHOOT_TO_ENEMY;

bool isValid (Cell c)
    {
        if (c == INVALID_POS)
            {
                return (true);
            }
        if (c.y == 7)
            {
                return (c.x&gt;=7 &amp;&amp; c.x&lt;=15);
            } 
        if (c.y == 6 || c.y == 5)
            {
                return (c.x == 7 || c.x == 10 || c.x == 15);
            }
        if (c.y == 4)
            {
                return (c.x != 8 &amp;&amp; c.x != 9);
            }
        if (c.y == 3 || c.y == 2)
            {
                return (c.x == 0 || c.x == 7 || c.x == 15);
            }
        if (c.y == 1)
            {
                return (c.x == 0 || (c.x &gt;=7 &amp;&amp; c.x&lt;=15));
            }
        if (c.y == 0)
            {
                return (c.x == 0);
            }

        return (false);
    }
bool matchEnded()
    {
        return (ended_enemies == 0 || mt_life&lt;=0);
    }</declaration>
	<template>
		<name>compactEnemy</name>
		<parameter>const id_t id, const int speed, int health, const int damage, const int spawningTime, const bool kind</parameter>
		<declaration>clock x;
clock z;

Cell pos := INVALID_POS;
int[0,2] chosenPath := 0;

void initialize(const int[0,2] i)
    {
        pos = START_POS;
        chosenPath = i;

        shoot_table[id].kind = kind;
        shoot_table[id].available = true;
        shoot_table[id].pos = pos;
        shoot_table[id].lifeTime = 0;

        available_enemies++;
        
        x = 0;
        z = 0;
    }
void shoot()
    {
        if (mt_life &gt; 0)
            mt_life = mt_life - damage;
    }
void dismiss ()
    {
       shoot_table[id].available = false;
       ended_enemies--;
       available_enemies--;
    }
void takeDamage ()
    {
        
        if (target_record.id == id)
            {
                health = health - target_record.damage;
                target_record.damage = 0;
                target_record.id = -1;
            }
    }
void next()
    {     
          if (pos.x == 0)
            {
                if (pos.y &lt;=3)
                    pos.y = pos.y+1;
                else
                    if (pos.y == 4)
                        pos.x = 1;
                
                return;
            }
        if (pos.x &gt;=1 &amp;&amp; pos.x &lt;= 6)
            {
                pos.x = pos.x +1;
                return;
            }
        if (pos.x == 7)
            {
                if (pos.y == 4)
                    {
                        if (chosenPath == 0 || chosenPath == 1)
                            pos.y = pos.y + 1;
                        else
                            pos.y = pos.y - 1;
                    }
                else
                    if (pos.y == 5 || pos.y == 6)
                        pos.y = pos.y + 1;
                    else
                        if (pos.y == 3 || pos.y == 2)
                            pos.y = pos.y - 1;
                        else
                            if (pos.y == 7 || pos.y == 1)
                                pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 8 &amp;&amp; pos.x &lt;= 9)
            {
                if (pos.y == 7 || pos.y == 1)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 10)
            {
                if (pos.y == 7)
                    {
                        if (chosenPath == 0)
                            pos.y = pos.y - 1;
                        else
                            pos.x = pos.x + 1;
                    }
                else
                    if (pos.y == 6 || pos.y == 5)
                        pos.y = pos.y - 1;
                    else
                        if (pos.y == 1 || pos.y == 4)
                            pos.x = pos.x + 1;
                return;
            }
        if (pos.x &gt;= 11 &amp;&amp; pos.x &lt;= 14)
            {
                if (pos.y == 7 || pos.y == 1 || pos.y == 4)
                    pos.x = pos.x + 1;
                return;
            }
        if (pos.x == 15)
            {
                if (pos.y &lt; 4 &amp;&amp; pos.y &gt;= 1)
                    pos.y = pos.y + 1;
                else
                    if (pos.y &gt; 4 &amp;&amp; pos.y &lt;= 7)
                        pos.y = pos.y - 1;
                return;
            }
    }
bool canMove()
    {
        return (!matchEnded() &amp;&amp; pos!=MAIN_POS &amp;&amp; health&gt;0);
    }</declaration>
		<location id="id0" x="357" y="425" color="#00ff00">
			<label kind="invariant" x="238" y="374">x&lt;=speed &amp;&amp; z&lt;=1</label>
		</location>
		<location id="id1" x="-110" y="510" color="#00ffff">
			<label kind="invariant" x="-161" y="518">x&lt;=spawningTime</label>
		</location>
		<location id="id2" x="467" y="263" color="#ffa500">
			<name x="442" y="229">afterShot</name>
			<label kind="invariant" x="484" y="255">x&lt;=speed</label>
		</location>
		<location id="id3" x="229" y="263" color="#ff0000">
			<name x="204" y="229">ended</name>
		</location>
		<init ref="id1"/>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="408" y="382">z&gt;=1 &amp;&amp; x&lt;speed &amp;&amp; canMove()</label>
			<label kind="assignment" x="408" y="399">shoot_table[id].lifeTime++,z=0</label>
			<nail x="399" y="391"/>
			<nail x="408" y="425"/>
		</transition>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="323" y="238">x&gt;=speed</label>
			<label kind="assignment" x="314" y="263">dismiss()</label>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="guard" x="170" y="297">health&lt;=0</label>
			<label kind="assignment" x="187" y="314">dismiss()</label>
		</transition>
		<transition id="id7">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="297" y="501">health&gt;0</label>
			<label kind="synchronisation" x="272" y="484">SHOOT_TO_ENEMY?</label>
			<label kind="assignment" x="280" y="518">takeDamage()</label>
			<nail x="323" y="467"/>
			<nail x="348" y="484"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="399" y="433">x&gt;=speed &amp;&amp; canMove()</label>
			<label kind="assignment" x="399" y="450">next(),shoot_table[id].pos =pos,shoot_table[id].lifeTime++,x=0,z=0</label>
			<nail x="374" y="476"/>
			<nail x="399" y="459"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-68" y="484">x==spawningTime</label>
			<label kind="assignment" x="76" y="484">initialize(2)</label>
			<nail x="-25" y="510"/>
			<nail x="187" y="510"/>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-102" y="365">x==spawningTime</label>
			<label kind="assignment" x="42" y="365">initialize(0)</label>
			<nail x="-110" y="391"/>
			<nail x="187" y="391"/>
		</transition>
		<transition id="id11">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-68" y="416">x == spawningTime</label>
			<label kind="assignment" x="93" y="416">initialize(1)</label>
			<nail x="-59" y="442"/>
			<nail x="204" y="442"/>
		</transition>
		<transition id="id12">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="450" y="306">pos == MAIN_POS &amp;&amp; health&gt;0 &amp;&amp; !matchEnded() &amp;&amp; z&gt;=1</label>
			<label kind="assignment" x="433" y="323">shoot(), x=0</label>
		</transition>
	</template>
	<template>
		<name>turret</name>
		<parameter>const idt_t id, const Cell pos, const int range, const int speed, const int damage</parameter>
		<declaration>clock y;

int dist(const Cell c1, const Cell c2)
    {
        int[-1,15] v1=abs(c1.x - c2.x), v2=abs(c1.y - c2.y);

        if (v1&gt;=v2)
            return (v1);
        else
            return (v2);
    }
void shoot (const id_t id)
    {
        target_record.id = id;
        target_record.damage = damage;
        y=0;
    }
void target()
    {
        bool found;
        int[0,MAX_ENEMIES] i, cont=0;
        id_t target_id;
        int[-1,15] target_dist, d;
        life_t target_lifeTime;

        if (available_enemies &gt; 0)
            {
                i = 0;
                found = false;
                while (i &lt; MAX_ENEMIES &amp;&amp; !found)
                    {
                        if (shoot_table[i].available &amp;&amp; dist(shoot_table[i].pos, pos)&lt;=range)
                            {
                                found = true;
                            }
                        i++;
                    }
                if (found)
                    {
                        target_id = i-1;
                        target_dist = dist(shoot_table[i-1].pos, pos);
                        target_lifeTime = shoot_table[i-1].lifeTime;
                        cont++;
                        for (i = i ; i&lt;MAX_ENEMIES &amp;&amp; cont &lt; available_enemies; i++)
                            {
                                if (shoot_table[i].available)
                                    {
                                        cont++;
                                        d = dist(shoot_table[i].pos, pos);
                                        if (d &lt;target_dist)
                                            {
                                                target_id = i;
                                                target_dist = d;
                                                target_lifeTime = shoot_table[i].lifeTime;
                                            }
                                        else
                                            {        
                                                if (d == target_dist)
                                                    {
                                                        if (shoot_table[i].lifeTime &lt; target_lifeTime)
                                                            {
                                                                target_id = i;
                                                                target_lifeTime = shoot_table[i].lifeTime;
                                                            }
                                                        else
                                                            {
                                                                if (target_lifeTime == shoot_table[i].lifeTime)
                                                                    {
                                                                        if (shoot_table[i].kind)
                                                                            {
                                                                                 target_id = i;
                                                                            }
                                                                    }
                                                            }
                                                    }
                                            }
                                       }
                            }

                        shoot (target_id);
                    }
        }   
    }
bool shootable()
    {
        int[0,MAX_ENEMIES] i, cont;
        
        cont=0;
        for (i = 0 ; i&lt;MAX_ENEMIES &amp;&amp; cont&lt;available_enemies; i++)
            {
                if (shoot_table[i].available)
                    {
                        cont++;
                        if (dist(shoot_table[i].pos, pos)&lt;=range)
                           {
                               return (true);
                           }
                    }
            }

        return (false);
    }
</declaration>
		<location id="id13" x="-459" y="-306" color="#00ff00">
			<name x="-469" y="-340">readyToShoot</name>
		</location>
		<location id="id14" x="-697" y="-306" color="#ffa500">
			<name x="-722" y="-340">wait</name>
			<label kind="invariant" x="-791" y="-306">y&lt;=speed</label>
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-688" y="-221">y&gt;=speed &amp;&amp; !matchEnded()</label>
			<nail x="-697" y="-229"/>
			<nail x="-459" y="-229"/>
		</transition>
		<transition id="id16">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-629" y="-348">shootable()</label>
			<label kind="synchronisation" x="-646" y="-365">SHOOT_TO_ENEMY!</label>
			<label kind="assignment" x="-612" y="-331">target()</label>
			<nail x="-578" y="-306"/>
		</transition>
	</template>
	<system>circlec(const id_t id, const int coeff) = compactEnemy(id, CIRCLE.speed, CIRCLE.health, CIRCLE.damage, coeff*CIRCLE.spawningTime, CIRCLE.kind);
squarec(const id_t id, const int coeff) = compactEnemy(id, SQUARE.speed, SQUARE.health, SQUARE.damage, coeff*SQUARE.spawningTime, SQUARE.kind);
basic(const idt_t id, const Cell pos) = turret(id, pos, BASIC.range, BASIC.speed, BASIC.damage);
cannon(const idt_t id, const Cell pos) = turret(id, pos, CANNON.range, CANNON.speed, CANNON.damage);
sniper(const idt_t id, const Cell pos) = turret(id, pos, SNIPER.range, SNIPER.speed, SNIPER.damage);

enc0 = circlec(0, 1);
enc1 = squarec(1, 1);
enc2 = circlec(2, 2);
enc3 = squarec(3, 2);
enc4 = circlec(4, 3);
enc5 = squarec(5, 3);
t0 = basic(0, TURRET0_POS);
t1 = cannon(1, TURRET1_POS);
t2 = cannon(2, TURRET2_POS);
t3 = cannon(3, TURRET3_POS);
t4 = cannon(4, TURRET4_POS);
t5 = sniper(5, TURRET5_POS);
t6 = sniper(6, TURRET6_POS);

system enc0,enc1,enc2,enc3,enc4,enc5,t0,t1,t2, t3,t4,t5,t6;




</system>
	<queries>
		<query>
			<formula>A[](deadlock imply matchEnded())</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt;(!matchEnded() imply forall(i:int[0,MAX_ENEMIES-1])(shoot_table[i].pos == MAIN_POS))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 18:55:01 +0200">
			</result>
		</query>
		<query>
			<formula>A[](
	(forall(i:int[0,MAX_ENEMIES-1])((shoot_table[i].pos == MAIN_POS &amp;&amp; !shoot_table[i].kind) imply shoot_table[i].lifeTime==(MAX_PATH_LENGTH*CIRCLE.speed))) &amp;&amp;
	(forall(i:int[0,MAX_ENEMIES-1])((shoot_table[i].pos == MAIN_POS &amp;&amp; shoot_table[i].kind) imply shoot_table[i].lifeTime==(MAX_PATH_LENGTH*SQUARE.speed)))
)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 18:55:12 +0200">
			</result>
		</query>
		<query>
			<formula>A[](forall(i:int[0,MAX_ENEMIES-1])(isValid(shoot_table[i].pos)))</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 18:55:23 +0200">
			</result>
		</query>
		<query>
			<formula>A[](mt_life &gt; 0)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-05-25 20:23:07 +0200">
			</result>
		</query>
	</queries>
</nta>
